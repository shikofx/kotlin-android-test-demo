name: SDET-ANDROID-DEMO CI

on: 
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      upload_full_build_dir:
        description: "Upload full build directory for inspection? (true/false)"
        required: true
        default: false
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write
  actions: write

jobs: 
  checkstyle:
    name: Checkstyle
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Static Analysis (Checkstyle)
        run: ./gradlew app:checkstyleDebug
      
      - name: Upload Checkstyle report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-report
          path: app/build/reports/checkstyle/
          retention-days: 2

  pmd:
    name: PMD
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Static Analysis (PMD)
        run: ./gradlew app:pmdDebug

      - name: Upload PMD report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pmd-report
          path: app/build/reports/pmd/
          retention-days: 2

  lint:
    name: Android Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Static Analysis (Android Lint)
        run: ./gradlew app:lintDebug

      - name: Prepare Lint artifact
        if: always()
        run: |
          mkdir -p lint-artifact
          cp app/build/reports/lint-results-debug.html lint-artifact/
          cp app/build/reports/lint-results-debug.xml lint-artifact/
          cp app/lint-baseline.xml lint-artifact/

      - name: Upload Lint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: lint-artifact/
          retention-days: 2

  testing:
    name: Testing
    runs-on: ubuntu-latest
    needs: [checkstyle, pmd, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest

      - name: Upload Unit Test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-report
          path: app/build/reports/tests/testDebugUnitTest/
          retention-days: 2
        
  build_apks:
    name: Build APKs
    runs-on: ubuntu-latest
    needs: [testing]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build debug APK
        if: github.event_name != 'pull_request' || github.base_ref != 'main'
        run: ./gradlew assembleDebug

      - name: Build release APK
        if: github.event_name == 'pull_request' && github.base_ref == 'main'
        run: ./gradlew assembleRelease # Note: This will require signing configuration for a real release

      - name: Upload full build directory for inspection
        if: github.event_name == 'workflow_dispatch' && inputs.upload_full_build_dir
        uses: actions/upload-artifact@v4
        with:
          name: full-build-output
          path: app/build/
          retention-days: 2

      - name: Clean up old Gradle caches
        if: always()
        uses: actions/github-script@v7
        with: 
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
            });

            const cachePrefix = 'linux-gradle-';
            const gradleCaches = caches.data.actions_caches
              .filter(cache => cache.key?.startsWith(cachePrefix))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            if (gradleCaches.length > 1) {
              console.log(`Found ${gradleCaches.length} Gradle caches. Keeping the latest and deleting the rest.`);
              const cachesToDelete = gradleCaches.slice(1);

              for (const cache of cachesToDelete) {
                console.log(`Deleting cache with key: ${cache.key}`);
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                });
              }
              console.log(`Deleted ${cachesToDelete.length} old caches.`);
            } else {
              console.log('No old Gradle caches to delete.');
            }

  publish_reports:
    name: Publish Reports
    runs-on: ubuntu-latest
    needs: [testing]
    if: always() # This job runs even if previous jobs fail, to ensure reports are always available
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Structure reports for GitHub Pages
        if: always()
        run: |
          set -e
          mkdir -p pages_root

          # --- Prepare index.html content ---
          cat <<EOF > pages_root/index.html
          <!DOCTYPE html>
          <html>
          <head>
            <title>Static Analysis Reports</title>
            <style>body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"; padding: 2em; line-height: 1.5; } h1 { border-bottom: 1px solid #d0d7de; padding-bottom: .3em; } ul { list-style-type: none; padding-left: 0; } li { margin-bottom: 1em; } a { text-decoration: none; color: #0969da; } a:hover { text-decoration: underline; }</style>
          </head>
          <body>
            <h1>Static Analysis Reports</h1>
            <p>Reports generated for the latest build. If a link is broken, the report was not generated.</p>
            <ul>
          EOF

          # --- Process Checkstyle report ---
          if [ -d "artifacts/checkstyle-report" ]; then
            echo "Processing Checkstyle reports..."
            mkdir -p pages_root/checkstyle
            cp -r artifacts/checkstyle-report/* pages_root/checkstyle/
            echo '<li><a href="checkstyle/debug.html">Checkstyle Report</a></li>' >> pages_root/index.html
          fi

          # --- Process PMD report ---
          if [ -d "artifacts/pmd-report" ]; then
            echo "Processing PMD reports..."
            mkdir -p pages_root/pmd
            cp -r artifacts/pmd-report/* pages_root/pmd/
            echo '<li><a href="pmd/debug.html">PMD Report</a></li>' >> pages_root/index.html
          fi

          # --- Process Android Lint ---
          if [ -d "artifacts/lint-report" ]; then
            echo "Found Android Lint report. Copying..."
            mkdir -p pages_root/lint
            cp artifacts/lint-report/lint-results-debug.html pages_root/lint/debug.html
            echo '<li><a href="lint/debug.html">Android Lint Report</a></li>' >> pages_root/index.html
          fi

          # --- Process Unit Test report ---
          if [ -d "artifacts/unit-test-report" ]; then
            echo "Processing Unit Test reports..."
            mkdir -p pages_root/unit-test
            cp -r artifacts/unit-test-report/* pages_root/unit-test/
            echo '<li><a href="unit-test/index.html">Unit Test Report</a></li>' >> pages_root/index.html
          fi
          
           # --- Process Lint Baseline ---
          if [ -f "artifacts/lint-report/lint-baseline.xml" ]; then
            echo "Found Lint baseline file from artifact. Creating a page for it..."
            mkdir -p pages_root/lint-baseline

            # Create the HTML page for the baseline, escaping HTML characters
            # This sed command is basic and might not cover all edge cases in XML.
            cat <<EOF > pages_root/lint-baseline/index.html
            <!DOCTYPE html>
            <html>
            <head>
              <title>Lint Baseline Issues</title>
              <style>body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"; padding: 2em; line-height: 1.5; } h1 { border-bottom: 1px solid #d0d7de; padding-bottom: .3em; } a { text-decoration: none; color: #0969da; } a:hover { text-decoration: underline; } pre { background-color: #f6f8fa; padding: 16px; overflow: auto; font-size: 85%; line-height: 1.45; border-radius: 6px; } code { font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace; }</style>
            </head>
            <body>
              <p><a href="../index.html">&laquo; Back to Reports Summary</a></p>
              <h1>Lint Baseline (Known Issues)</h1>
              <p>This is the list of known issues that are currently ignored by the main Lint check.</p>
              <pre><code>$(sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g' -e "s/&apos;/'/g" -e 's/&quot;/"/g' artifacts/lint-report/lint-baseline.xml)</code></pre>
            </body>
            </html>
          EOF
            # Add a link to the main index page
            echo '<li><a href="lint-baseline/">Lint Baseline (Known Issues)</a></li>' >> pages_root/index.html
          fi

          # --- Finalize index.html ---
          cat <<EOF >> pages_root/index.html
            </ul>
          </body>
          </html>
          EOF
          
      - name: Upload Pages artifact
        if: always()
        uses: actions/upload-pages-artifact@v4
        with:
          path: 'pages_root'

  deploy_report:
    name: Deploy Report
    runs-on: ubuntu-latest
    needs: [build_apks, publish_reports]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

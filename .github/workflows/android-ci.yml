name: SDET-ANDROID-DEMO CI

on: 
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      upload_full_build_dir:
        description: "Upload full build directory for inspection? (true/false)"
        required: true
        default: false
        type: boolean


permissions:
  contents: read
  pages: write
  id-token: write

jobs: 
  build_and_analyze:
    name: Build and Analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
    
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Static Analysis (Checkstyle)
        run: ./gradlew app:checkstyleDebug

      - name: Run Static Analysis (PMD)
        run: ./gradlew app:pmdDebug

      - name: Run Static Analysis (Android Lint)
        run: ./gradlew app:lintDebug

      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest

      - name: Build debug APK
        run: ./gradlew assembleDebug
        
      - name: Upload full build directory for inspection
        if: github.event_name == 'workflow_dispatch' && inputs.upload_full_build_dir
        uses: actions/upload-artifact@v4
        with:
          name: full-build-output
          path: app/build/

      - name: Upload analysis reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-reports
          path: app/build/reports/

      - name: Structure reports for GitHub Pages
        if: always()
        run: |
          set -e
          mkdir -p pages_root

          # --- Prepare index.html content ---
          cat <<EOF > pages_root/index.html
          <!DOCTYPE html>
          <html>
          <head>
            <title>Static Analysis Reports</title>
            <style>body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"; padding: 2em; line-height: 1.5; } h1 { border-bottom: 1px solid #d0d7de; padding-bottom: .3em; } ul { list-style-type: none; padding-left: 0; } li { margin-bottom: 1em; } a { text-decoration: none; color: #0969da; } a:hover { text-decoration: underline; }</style>
          </head>
          <body>
            <h1>Static Analysis Reports</h1>
            <p>Reports generated for the latest build. If a link is broken, the report was not generated.</p>
            <ul>
          EOF

          # --- Process tool reports (PMD, Checkstyle) ---
          for tool in pmd checkstyle; do
            report_dir="app/build/reports/${tool}"
            if [ -d "${report_dir}" ]; then
              echo "Processing ${tool} reports..."
              # Copy the entire tool's report directory
              cp -r "${report_dir}" "pages_root/"

              # Find generated html reports and add links to the index
              for report_file in ${report_dir}/*.html; do
                if [ -f "${report_file}" ]; then
                  variant=$(basename "${report_file}" .html)
                  tool_title=$(echo "${tool}" | awk '{print toupper(substr($0,1,1))substr($0,2)}')
                  variant_title=$(echo "${variant}" | awk '{print toupper(substr($0,1,1))substr($0,2)}')
                  echo "<li><a href=\"${tool}/${variant}.html\">${tool_title} Report (${variant_title})</a></li>" >> pages_root/index.html
                fi
              done
            fi
          done

          # --- Process Android Lint ---
          if [ -f app/build/reports/lint-results-debug.html ]; then
            echo "Found Android Lint report. Copying..."
            mkdir -p pages_root/lint
            cp app/build/reports/lint-results-debug.html pages_root/lint/debug.html
            echo '<li><a href="lint/debug.html">Android Lint Report (Debug)</a></li>' >> pages_root/index.html
          fi
          
           # --- Process Lint Baseline ---
          if [ -f app/lint-baseline.xml ]; then
            echo "Found Lint baseline file. Creating a page for it..."
            mkdir -p pages_root/lint-baseline

            # Create the HTML page for the baseline, escaping HTML characters
            # This sed command is basic and might not cover all edge cases in XML.
            cat <<EOF > pages_root/lint-baseline/index.html
            <!DOCTYPE html>
            <html>
            <head>
              <title>Lint Baseline Issues</title>
              <style>body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"; padding: 2em; line-height: 1.5; } h1 { border-bottom: 1px solid #d0d7de; padding-bottom: .3em; } a { text-decoration: none; color: #0969da; } a:hover { text-decoration: underline; } pre { background-color: #f6f8fa; padding: 16px; overflow: auto; font-size: 85%; line-height: 1.45; border-radius: 6px; } code { font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace; }</style>
            </head>
            <body>
              <p><a href="../index.html">&laquo; Back to Reports Summary</a></p>
              <h1>Lint Baseline (Known Issues)</h1>
              <p>This is the list of known issues that are currently ignored by the main Lint check.</p>
              <pre><code>$(sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g' -e "s/&apos;/'/g" -e 's/&quot;/"/g' app/lint-baseline.xml)</code></pre>
            </body>
            </html>
          EOF
            # Add a link to the main index page
            echo '<li><a href="lint-baseline/">Lint Baseline (Known Issues)</a></li>' >> pages_root/index.html
          fi

          # --- Finalize index.html ---
          cat <<EOF >> pages_root/index.html
            </ul>
          </body>
          </html>
          EOF
      - name: Upload Pages artifact
        if: always()
        uses: actions/upload-pages-artifact@v4
        with:
          path: 'pages_root'

  report:
    name: Report
    needs: build_and_analyze
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

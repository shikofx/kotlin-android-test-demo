name: REPORTING

on:
  workflow_call:

permissions:
  contents: read
  pages: write
  id-token: write
  actions: write

jobs:
  publish_reports:
    name: Publish
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Allure Commandline
        run: npm install -g allure-commandline

      - name: Structure reports for GitHub Pages
        if: always()
        run: |
          set -e
          mkdir -p pages_root

          # --- Prepare index.html content ---
          cat <<EOF > pages_root/index.html
          <!DOCTYPE html>
          <html>
          <head>
            <title>Static Analysis Reports</title>
            <style>body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"; padding: 2em; line-height: 1.5; } h1 { border-bottom: 1px solid #d0d7de; padding-bottom: .3em; } ul { list-style-type: none; padding-left: 0; } li { margin-bottom: 1em; } a { text-decoration: none; color: #0969da; } a:hover { text-decoration: underline; }</style>
          </head>
          <body>
            <h1>Static Analysis Reports</h1>
            <p>Reports generated for the latest build. If a link is broken, the report was not generated.</p>
            <ul>
          EOF

          # --- Process Checkstyle report ---
          if [ -d "artifacts/checkstyle-report" ]; then
            echo "Processing Checkstyle reports..."
            mkdir -p pages_root/checkstyle
            cp -r artifacts/checkstyle-report/* pages_root/checkstyle/
            echo '<li><a href="checkstyle/debug.html">Checkstyle Report</a></li>' >> pages_root/index.html
          fi

          # --- Process PMD report ---
          if [ -d "artifacts/pmd-report" ]; then
            echo "Processing PMD reports..."
            mkdir -p pages_root/pmd
            cp -r artifacts/pmd-report/* pages_root/pmd/
            echo '<li><a href="pmd/debug.html">PMD Report</a></li>' >> pages_root/index.html
          fi

          # --- Process Android Lint ---
          if [ -d "artifacts/lint-report" ]; then
            echo "Found Android Lint report. Copying..."
            mkdir -p pages_root/lint
            cp artifacts/lint-report/lint-results-debug.html pages_root/lint/debug.html
            echo '<li><a href="lint/debug.html">Android Lint Report</a></li>' >> pages_root/index.html
          fi

          # --- Process Unit Test report ---
          if [ -d "artifacts/unit-test-report" ]; then
            echo "Processing Unit Test reports..."
            mkdir -p pages_root/unit-test
            cp -r artifacts/unit-test-report/* pages_root/unit-test/
            echo '<li><a href="unit-test/index.html">Unit Test Report</a></li>' >> pages_root/index.html
          fi

          # --- Generate and process Allure report ---
          if [ -d "artifacts/allure-results" ]; then
            echo "Generating Allure report..."
            allure generate artifacts/allure-results --clean -o pages_root/allure-report
            echo '<li><a href="allure-report/index.html">Allure Test Report</a></li>' >> pages_root/index.html
          else
            echo "Allure results not found, skipping report generation."
          fi
          
          # --- Process JaCoCo report ---
          if [ -d "artifacts/jacoco-report" ]; then
            echo "Processing JaCoCo report..."
            mkdir -p pages_root/jacoco-report
            cp -r artifacts/jacoco-report/* pages_root/jacoco-report/
            echo '<li><a href="jacoco-report/index.html">JaCoCo Code Coverage Report</a></li>' >> pages_root/index.html
          fi

           # --- Process Lint Baseline ---
          if [ -f "artifacts/lint-report/lint-baseline.xml" ]; then
            echo "Found Lint baseline file from artifact. Creating a page for it..."
            mkdir -p pages_root/lint-baseline

            # Create the HTML page for the baseline, escaping HTML characters
            cat <<EOF > pages_root/lint-baseline/index.html
            <!DOCTYPE html>
            <html>
            <head>
              <title>Lint Baseline Issues</title>
              <style>body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"; padding: 2em; line-height: 1.5; } h1 { border-bottom: 1px solid #d0d7de; padding-bottom: .3em; } a { text-decoration: none; color: #0969da; } a:hover { text-decoration: underline; } pre { background-color: #f6f8fa; padding: 16px; overflow: auto; font-size: 85%; line-height: 1.45; border-radius: 6px; } code { font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace; }</style>
            </head>
            <body>
              <p><a href="../index.html">&laquo; Back to Reports Summary</a></p>
              <h1>Lint Baseline (Known Issues)</h1>
              <p>This is the list of known issues that are currently ignored by the main Lint check.</p>
              <pre><code>$(sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g' -e "s/&apos;/'/g" -e 's/&quot;/"/g' artifacts/lint-report/lint-baseline.xml)</code></pre>
            </body>
            </html>
          EOF
            # Add a link to the main index page
            echo '<li><a href="lint-baseline/">Lint Baseline (Known Issues)</a></li>' >> pages_root/index.html
          fi

          # --- Finalize index.html ---
          cat <<EOF >> pages_root/index.html
            </ul>
          </body>
          </html>
          EOF
          
      - name: Upload Pages artifact
        if: always()
        uses: actions/upload-pages-artifact@v4
        with:
          path: 'pages_root'

  deploy_report:
    name: Deploy Pages
    runs-on: ubuntu-latest
    if: always()
    needs: [publish_reports]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4